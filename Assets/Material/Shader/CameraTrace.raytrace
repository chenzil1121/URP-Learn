#include "RayTracingHelp.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

//前三维是radiance，后一维是hit distance
RWTexture2D<float4> _RayTracingOutput;
RaytracingAccelerationStructure  _RaytracingAccelerationStructure;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

#pragma max_recursion_depth 1

[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload)
{
	rayPayload.hitT = -1.0;
}

[shader("raygeneration")]
void RayGenShader()
{
	uint3 dispatchIdx = DispatchRaysIndex().xyz; // current pixel

	uint2 launchDim = DispatchRaysDimensions().xy; // target resolution
    float2 uv       = (float2)dispatchIdx.xy / (float2)launchDim;
	
    float2 uv_ndc = uv * 2.0f - 1.0f;
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 rayDir = mul(_CameraInverseProjection, float4(uv_ndc, 0.0f, 1.0f)).xyz;
	rayDir = mul(_CameraToWorld, float4(rayDir, 0.0f)).xyz;
	rayDir = normalize(rayDir);

    // RayDesc is DXR-defined struct
	RayDesc rayDesc;
	rayDesc.Origin = origin; // start at camera position
	rayDesc.Direction = rayDir;
	rayDesc.TMin = 0; 
	rayDesc.TMax = 100000;

    RayPayload rayPayload = (RayPayload)0;

    TraceRay(
        _RaytracingAccelerationStructure, 
        RAY_FLAG_NONE, 
        0xFF, 
        0, 
        1, 
        0, 
        rayDesc, 
        rayPayload);

    //// 光线未打中任何物体
    //if(rayPayload.hitT < 0)
    //{
    //    // radiance是天空盒的颜色，击中距离是一个较大值
    //    _RayTracingOutput[DispatchRaysIndex().xy]=float4(0, 0, 0, 1e27f);
    //    return;
    //}

    //// 光线击中背面
    //if(rayPayload.hitKind == HIT_KIND_TRIANGLE_BACK_FACE)
    //{
    //    _RayTracingOutput[DispatchRaysIndex().xy]=float4(0, 0, 0, -rayPayload.hitT * 0.2f);
    //    return;
    //}

    // 光线正常击中物体
    if(rayPayload.hitKind == HIT_KIND_TRIANGLE_FRONT_FACE)
    {
        _RayTracingOutput[DispatchRaysIndex().xy]=float4(rayPayload.shadingNormal, 1);
        return;
    }

}
