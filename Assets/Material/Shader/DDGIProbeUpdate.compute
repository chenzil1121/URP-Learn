//Unity不支持C#接口的#define int/float，只有对于bool类型的变体支持
//numthreads必须预先定义好，要和外部volumeDesc匹配
#pragma kernel ProbeDistance;
#pragma kernel ProbeIrradiance

#include "DDGICommon.hlsl"

RWTexture2DArray<float4> _Result;
Texture2DArray<float4> _RayData;

int _ProbeNumTexels;
int _ProbeNumRays;
float _Hysteresis;
float _IrradianceEncodingGamma;
int4 _ProbeCount;
float4 _ProbeRayRotation;
float4 _ProbeSpacing;

#define DDGI_BLEND_RAYS_PER_PROBE 128

//Unity没法从C#脚本定义#define int/float，只有bool值的#program可以用

groupshared float3 RayRadiance[DDGI_BLEND_RAYS_PER_PROBE];
groupshared float  RayDistance[DDGI_BLEND_RAYS_PER_PROBE];
groupshared float3 RayDirection[DDGI_BLEND_RAYS_PER_PROBE];


// Cooperatively load the ray radiance and hit distance values into shared memory
// Cooperatively compute probe ray directions
void LoadSharedMemory(int probeIndex, uint GroupIndex)
{
    //每个线程需要加载多少光线数据，向上取整
    int totalIterations = int(ceil(float(DDGI_BLEND_RAYS_PER_PROBE) / float(_ProbeNumTexels * _ProbeNumTexels)));
    for (int iteration = 0; iteration < totalIterations; iteration++)
    {
        //GroupIndex是线程组内展平的ID
        int rayIndex = (GroupIndex * totalIterations) + iteration;
        if (rayIndex >= DDGI_BLEND_RAYS_PER_PROBE) break;

        // Get the coordinates for the probe ray in the RayData texture array
        uint3 rayDataTexCoords = DDGIGetRayDataTexelCoords(rayIndex, probeIndex, _ProbeCount.xyz);

        // Load the ray radiance and store it in shared memory
        RayRadiance[rayIndex] = _RayData[rayDataTexCoords].rgb;

        // Load the ray hit distance and store it in shared memory
        RayDistance[rayIndex] = _RayData[rayDataTexCoords].a;

        // Get a random normalized probe ray direction and store it in shared memory
        RayDirection[rayIndex] = DDGIGetProbeRayDirection(rayIndex, _ProbeNumRays, _ProbeRayRotation);
    }

    // Wait for all threads in the group to finish their shared memory operations
    GroupMemoryBarrierWithGroupSync();
}

// When the thread maps to a border texel, update it with the latest blended information for later use in bilinear filtering
void UpdateBorderTexel(uint3 DispatchThreadID, uint3 GroupThreadID, uint3 GroupID)
{
    bool isCornerTexel = (GroupThreadID.x == 0 || GroupThreadID.x == (_ProbeNumTexels - 1)) && (GroupThreadID.y == 0 || GroupThreadID.y == (_ProbeNumTexels - 1));
    bool isRowTexel = (GroupThreadID.x > 0 && GroupThreadID.x < (_ProbeNumTexels - 1));

    uint3 copyCoordinates = uint3(GroupID.x * _ProbeNumTexels, GroupID.y * _ProbeNumTexels, DispatchThreadID.z);
    int probeNumInteriorTexels = _ProbeNumTexels - 2;
    if (isCornerTexel)
    {
        copyCoordinates.x += GroupThreadID.x > 0 ? 1 : probeNumInteriorTexels;
        copyCoordinates.y += GroupThreadID.y > 0 ? 1 : probeNumInteriorTexels;
    }
    else if (isRowTexel)
    {
        copyCoordinates.x += (_ProbeNumTexels - 1) - GroupThreadID.x;
        copyCoordinates.y += GroupThreadID.y + ((GroupThreadID.y > 0) ? -1 : 1);
    }
    else // Column Texel
    {
        copyCoordinates.x += GroupThreadID.x + ((GroupThreadID.x > 0) ? -1 : 1);
        copyCoordinates.y += (_ProbeNumTexels - 1) - GroupThreadID.y;
    }

    _Result[DispatchThreadID] = _Result[copyCoordinates];
}

//14+2，2是边界,每个线程组映射一块八面体纹素区域
[numthreads(16, 16, 1)]
void ProbeDistance(
    uint3 DispatchThreadID : SV_DispatchThreadID,
    uint3 GroupThreadID : SV_GroupThreadID,
    uint3 GroupID : SV_GroupID,
    uint  GroupIndex : SV_GroupIndex)
{
    // Probe在三个轴上的数量
    int3 probeCount = _ProbeCount.xyz;

    int probeNumInteriorTexels = _ProbeNumTexels - 2;
    // Determine if this thread maps to a probe border texel
    bool isBorderTexel = (GroupThreadID.x == 0 || GroupThreadID.x == (probeNumInteriorTexels + 1)) || (GroupThreadID.y == 0 || GroupThreadID.y == (probeNumInteriorTexels + 1)); 
    
    int probeIndex = DDGIGetProbeIndex(DispatchThreadID, _ProbeNumTexels, probeCount);
    // Get the number of probes
    uint numProbes = (probeCount.x * probeCount.y * probeCount.z);

    // Cooperatively load the ray radiance and hit distance values into shared memory and cooperatively compute probe ray directions
    LoadSharedMemory(probeIndex, GroupIndex);

    if (!isBorderTexel)
    {
        // Remap thread coordinates to not include the border texels
        int3 threadCoords = int3(GroupID.x * probeNumInteriorTexels, GroupID.y * probeNumInteriorTexels, DispatchThreadID.z) + GroupThreadID - int3(1, 1, 0);

        // Get the probe ray direction associated with this thread
        float2 probeOctantUV = DDGIGetNormalizedOctahedralCoordinates(int2(threadCoords.xy), probeNumInteriorTexels);
        // 八面体纹素对应的三维八面体上的方向
        float3 probeRayDirection = DDGIGetOctahedralDirection(probeOctantUV);
        
        // Initialize the max probe hit distance to 50% larger the maximum distance between probe grid cells
        float probeMaxRayDistance = length(_ProbeSpacing.xyz) * 1.5f;

        float4 result = float4(0.f, 0.f, 0.f, 0.f);
        for (uint rayIndex = 0; rayIndex < _ProbeNumRays; rayIndex++)
        {
            float3 rayDirection = RayDirection[rayIndex];

            // 权重是基于八面体纹素方向和实际光线方向的余弦
            float weight = max(0.f, dot(probeRayDirection, rayDirection));
            
            float probeRayDistance = min(abs(RayDistance[rayIndex]), probeMaxRayDistance);
            result += float4(probeRayDistance * weight, (probeRayDistance * probeRayDistance) * weight, 0.f, weight);
        }

        result.rgb *= 1.f / max(result.a, _ProbeNumRays * 1e-9f);

        float2 prev = _Result[DispatchThreadID].rg;

        float  hysteresis = _Hysteresis;
        if (dot(prev, prev) == 0) hysteresis = 0.f;

        result = float4(lerp(result.rg, prev.rg, hysteresis), 0.f, 1.f);

        _Result[DispatchThreadID] = result;
    }

    // 确保除了边界以外的所有线程都写入完成，开始复制边界
    AllMemoryBarrierWithGroupSync();

    if (isBorderTexel)
        // Update the texel with the latest blended data
        UpdateBorderTexel(DispatchThreadID, GroupThreadID, GroupID);
}

//6+2，2是边界，每个线程组映射一块八面体纹素区域
[numthreads(8, 8, 1)]
void ProbeIrradiance(
    uint3 DispatchThreadID : SV_DispatchThreadID,
    uint3 GroupThreadID : SV_GroupThreadID,
    uint3 GroupID : SV_GroupID,
    uint  GroupIndex : SV_GroupIndex)
{
    // Probe在三个轴上的数量
    int3 probeCount = _ProbeCount.xyz;

    int probeNumInteriorTexels = _ProbeNumTexels - 2;
    // Determine if this thread maps to a probe border texel
    // Border Columns
    // Border Rows
    bool isBorderTexel = (GroupThreadID.x == 0 || GroupThreadID.x == (probeNumInteriorTexels + 1)) || (GroupThreadID.y == 0 || GroupThreadID.y == (probeNumInteriorTexels + 1));

    int probeIndex = DDGIGetProbeIndex(DispatchThreadID, _ProbeNumTexels, probeCount);
    // Get the number of probes
    uint numProbes = (probeCount.x * probeCount.y * probeCount.z);

    // Cooperatively load the ray radiance and hit distance values into shared memory and cooperatively compute probe ray directions
    LoadSharedMemory(probeIndex, GroupIndex);

    if (!isBorderTexel)
    {
        // Remap thread coordinates to not include the border texels
        int3 threadCoords = int3(GroupID.x * probeNumInteriorTexels, GroupID.y * probeNumInteriorTexels, DispatchThreadID.z) + GroupThreadID - int3(1, 1, 0);

        // Get the probe ray direction associated with this thread
        float2 probeOctantUV = DDGIGetNormalizedOctahedralCoordinates(int2(threadCoords.xy), probeNumInteriorTexels);
        //八面体纹素对应的三维八面体上的方向
        float3 probeRayDirection = DDGIGetOctahedralDirection(probeOctantUV);

        float4 result = float4(0.f, 0.f, 0.f, 0.f);
        for (uint rayIndex = 0; rayIndex < _ProbeNumRays; rayIndex++)
        {
            float3 rayDirection = RayDirection[rayIndex];

            // 权重是基于八面体纹素方向和实际光线方向的余弦
            float weight = max(0.f, dot(probeRayDirection, rayDirection));

            float3 probeRayRadiance = RayRadiance[rayIndex];
            float  probeRayDistance = RayDistance[rayIndex];

            if (probeRayDistance < 0.f)
                continue;

            // Blend the ray's radiance
            result += float4(probeRayRadiance * weight, weight);
        }

        result.rgb *= 1.f / (2.f * max(result.a, _ProbeNumRays * 1e-9f));

        // Tone-mapping gamma adjustment
        result.rgb = pow(result.rgb, (1.f / _IrradianceEncodingGamma));
        float3 prev = _Result[DispatchThreadID].rgb;

        float  hysteresis = _Hysteresis;
        if (dot(prev, prev) == 0) hysteresis = 0.f;

        result = float4(lerp(result.rgb, prev, hysteresis), 1.f);

        _Result[DispatchThreadID] = result;
    }

    //确保除了边界以外的所有线程都写入完成，开始复制边界
    AllMemoryBarrierWithGroupSync();

    if (isBorderTexel)
        // Update the texel with the latest blended data
        UpdateBorderTexel(DispatchThreadID, GroupThreadID, GroupID);
}
